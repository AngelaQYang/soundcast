\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=0.5cm,bmargin=0.5cm,lmargin=1.0cm,rmargin=0.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
{hyperref}
\hypersetup{
pdfstartview={XYZ null null 1}}
\usepackage{breakurl}
\usepackage{lscape}            % for landscape mode tables

\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{prefix.string=graphics/plot, eps = FALSE, pdf = TRUE}
\setlength{\textwidth}{6in} 
\def\Sweavesize{\smallsize} 

\title{Daysim Summary}

\author{PSRC}

\maketitle
\small

\begin{abstract}
This document compares a SoundCast run to the household survey data.
\end{abstract}

<<echo=false>>=
# Author: suzanne.childress
###############################################################################

###This script generates basic summaries for a Daysim model run outputs in HDF5
#install.packages("plyr")
#install.packages("data.table")
#install.packages("rhdf5")
# can be found on: http://www.bioconductor.org/packages/2.13/bioc/html
# /rhdf5.html
#install.packages("ggplot2")
#install.packages("car")
#install.packages("xtable")
#install.packages("sqldf")
#install.packages("reshape2")
#install.packages("knitr")

library(plyr)
library(data.table)
library(rhdf5)
library(ggplot2)
library(car)
library(xtable)
library(sqldf)
library(reshape2)
library(knitr)

options(width=100)
options("scipen" = 100, digits=2)
@


<<summary, cache=TRUE, eval=TRUE, echo=FALSE, include=TRUE, results = verbatim>>=
paths<- vector(mode = "list", length=2)
# construct the names of where the files are located
run_path<-getwd()
run_path = unlist(strsplit(run_path, split="scripts", fixed=TRUE))[1]
paths <-c(paste(run_path, "/outputs/daysim_outputs.h5",sep = ""),
          paste(run_path, "/scripts/summarize/survey.h5", sep = ""))
dist_sum <- paste(run_path, "/outputs/district_summary", sep = "")

# Give a descriptive name of the two datasets that are being compared
# For now we will assume the first dataset is ALWAYS the model, and the second is ALWAYS
# the survey
names(paths)<- c("2010 Model Run", "2006 Survey")
type <- names(paths)

district_file <- paste(run_path, "/scripts/summarize/TAZ_TAD_County.csv",sep = "")

###Some convenience functions to make summaries more readable
# We  want to put this into the HDF5 file, but it's not there yet
recode <- function(dataset){
  dataset$mode[dataset$mode==1] <- "walk"
  dataset$mode[dataset$mode==2] <- "bike"
  dataset$mode[dataset$mode==3] <- "sov"
  dataset$mode[dataset$mode==4] <- "hov2"
  dataset$mode[dataset$mode==5] <- "hov3+"
  dataset$mode[dataset$mode==6] <- "transit"
  dataset$mode[dataset$mode==7] <- "other"
  dataset$mode[dataset$mode==8] <- "school_bus"
  dataset$mode[dataset$mode==9] <- "other"
  
  dataset$dpurp[dataset$dpurp==0] <- "home"
  dataset$dpurp[dataset$dpurp==1] <- "work"
  dataset$dpurp[dataset$dpurp==2] <- "school"
  dataset$dpurp[dataset$dpurp==3] <- "escort"
  dataset$dpurp[dataset$dpurp==4] <- "personal business"
  dataset$dpurp[dataset$dpurp==5] <- "shop"
  dataset$dpurp[dataset$dpurp==6] <- "meal"
  dataset$dpurp[dataset$dpurp==7] <- "social"
  dataset$dpurp[dataset$dpurp==8] <- "social"
  dataset$dpurp[dataset$dpurp==9] <- "personal business"
  dataset$dpurp[dataset$dpurp==10] <- "other"
  dataset
}

recode_tours <- function(dataset){
  dataset$tmodetp[dataset$tmodetp==1] <- "walk"
  dataset$tmodetp[dataset$tmodetp==2] <- "bike"
  dataset$tmodetp[dataset$tmodetp==3] <- "sov"
  dataset$tmodetp[dataset$tmodetp==4] <- "hov2"
  dataset$tmodetp[dataset$tmodetp==5] <- "hov3+"
  dataset$tmodetp[dataset$tmodetp==6] <- "transit"
  dataset$tmodetp[dataset$tmodetp==7] <- "other"
  dataset$tmodetp[dataset$tmodetp==8] <- "school_bus"
  dataset$tmodetp[dataset$tmodetp==9] <- "other"
  
  dataset$pdpurp[dataset$pdpurp==0] <- "home"
  dataset$pdpurp[dataset$pdpurp==1] <- "work"
  dataset$pdpurp[dataset$pdpurp==2] <- "school"
  dataset$pdpurp[dataset$pdpurp==3] <- "escort"
  dataset$pdpurp[dataset$pdpurp==4] <- "personal business"
  dataset$pdpurp[dataset$pdpurp==5] <- "shop"
  dataset$pdpurp[dataset$pdpurp==6] <- "meal"
  dataset$pdpurp[dataset$pdpurp==7] <- "social"
  dataset$pdpurp[dataset$pdpurp==8] <- "social"
  dataset$pdpurp[dataset$pdpurp==9] <- "personal business"
  dataset$pdpurp[dataset$pdpurp==10] <- "other"
  dataset
}

recode_districts<-function(dataset){
  # change the input file
  dataset$District[dataset$District==1] <- "Lakewood"
  dataset$District[dataset$District==2] <- "SE Pierce"
  dataset$District[dataset$District==3] <- "Tacoma"
  dataset$District[dataset$District==4] <- "Federal Way"
  dataset$District[dataset$District==5] <- "Kent"
  dataset$District[dataset$District==6] <- "Burien"
  dataset$District[dataset$District==7] <- "Issaquah"
  dataset$District[dataset$District==8] <- "Bellevue"
  dataset$District[dataset$District==9] <- "Redmond"
  dataset$District[dataset$District==10] <- "South Seattle"
  dataset$District[dataset$District==11] <- "Seattle CBD"
  dataset$District[dataset$District==12] <- "Capitol Hill"
  dataset$District[dataset$District==13] <- "North Seattle"
  dataset$District[dataset$District==14] <- "Shoreline"
  dataset$District[dataset$District==15] <- "Lynnwood"
  dataset$District[dataset$District==16] <- "Mill Creek"
  dataset$District[dataset$District==17] <- "Everett"
  dataset$District[dataset$District==18] <- "Marysville"
  dataset$District[dataset$District==19] <- "Kitsap"
  dataset$District[dataset$District==20] <- "External/PNR"
  dataset
}


get_total <- function(exp_fac)
{
  total <- sum(exp_fac)
  if(total<1)
  {
    total <- nrow(exp_fac)
  }
  total 
}

h5group_to_table<-function (daysim_path, h5_data_root, datasets = NULL) 
{
    if (is.null(datasets)) {
        dir <- h5ls(daysim_path)
        datasets_select <- dir[dir$group %in% h5_data_root, "name"]
    }
    else {
        datasets_select <- datasets
    }
    i = 0
    for (x in datasets_select) {
        if (i == 0) {
            outtable <- data.table(h5read(daysim_path, paste(h5_data_root, 
                x, sep = "/")))
        }
        else {
            outtable <- cbind(outtable, data.table(h5read(daysim_path, 
                paste(h5_data_root, x, sep = "/"))))
        }
        i = i + 1
    }
    setnames(outtable, datasets_select)
    return(outtable)
}

get_group_names<-function (data1_path) 
{
    dataset_names <- h5ls(data1_path)
    group_names <- unique(dataset_names$group)
    group_names <- group_names[group_names != "/"]
    group_names
}

######################################################################################
# READ IN DATA

zone_district<- read.csv(district_file)
zone_district<-recode_districts(zone_district)

for(i in 1:length(paths))
{
  
  for(group in get_group_names(paths[i]))
  {
    table<- h5group_to_table(paths[i], group)
    table_name <- unlist(strsplit(group, split='/', fixed=TRUE))
    table_name <- paste(table_name[2],toString(i), sep="_")
    assign(table_name, table)
  }
}
#####################################################################
### RECODE DATA FOR READABILITY

Trip_1<-recode(Trip_1)
Trip_2 <-recode(Trip_2)

Tour_1<-recode_tours(Tour_1)
Tour_2<-recode_tours(Tour_2)

#####################################################################
@


\section{Basic Summaries}
\subsection{Total Households and Persons}
<<summary, cache=TRUE, eval=TRUE, echo=FALSE, include=TRUE, results = verbatim>>=
merge_per_hh_1 <- merge(Person_1, Household_1, by = "hhno")
merge_per_hh_2 <- merge(Person_2, Household_2, by = "hhno")

Person_1_total <- get_total(merge_per_hh_1$psexpfac)
Person_2_total <- get_total(merge_per_hh_2$psexpfac)
Census_Persons <- 3616747
ACS_Persons <- 3445799
# Census and ACS from the PSRC website:http://www.psrc.org/data/pophousing/pophousin#-estimates/

DifferencePersons <- Person_1_total - Person_2_total

Household_1_total <- get_total(Household_1$hhexpfac)
Household_2_total <- get_total(Household_2$hhexpfac)
Census_Households <- 1454695
ACS_Households<- 1380559

DifferenceHouseholds <- Household_1_total - Household_2_total

Average_HHSize_1 <- Person_1_total/Household_1_total
Average_HHSize_2 <- Person_2_total/Household_2_total
Census_HHSize <- 2.49
ACS_HHSize <- 2.50


Totals_HH<- data.frame(rbind
                       (cbind(Person_1_total,Person_2_total,Census_Persons, ACS_Persons),
              cbind(Household_1_total, Household_2_total, Census_Households, ACS_Households),
              cbind(Average_HHSize_1, Average_HHSize_2, Census_HHSize, ACS_HHSize)))
row.names(Totals_HH)<-  c("Total Persons", "Total Households","Average Household Size")
colnames(Totals_HH) <- c(names(paths[1]), names(paths[2]), "2010 Census", "2006 ACS")       
                          
print(Totals_HH)
@



\subsection{Total Trips}
<<summary, cache=TRUE, eval=TRUE, echo=FALSE, include=TRUE, results = verbatim>>=
Trip_1_total <- get_total(Trip_1$trexpfac)
Trip_2_total <- get_total(Trip_2$trexpfac)
Diff_Trips <- Trip_1_total- Trip_2_total
Per_Diff_Trips <- 100*Diff_Trips/Trip_2_total

Trip_1$type <- names(paths[1])
Trip_2$type <- names(paths[2])

TripsperPerson_1 <- Trip_1_total/Person_1_total
TripsperPerson_2 <- Trip_2_total/Person_2_total

DiffTripsperPers <- TripsperPerson_1 -TripsperPerson_2
PercentDiffTripPer <- 100*DiffTripsperPers/TripsperPerson_2

trip_ok_1 <- subset(Trip_1, travdist>0 & travdist<2000)
trip_ok_2<- subset(Trip_2, travdist>0 & travdist<2000)

Trip_1$share <- 1/nrow(Trip_1)
Trip_2$share <- Trip_2$trexpfac/sum(Trip_2$trexpfac)

driver_trips1<-trip_ok_1$travdist[trip_ok_1$dorp==1]
driver_trips2<- trip_ok_2[trip_ok_2$dorp==1]

Trip_1_Ave_Dist <- weighted.mean(trip_ok_1$travdist, trip_ok_1$trexpfac)
Trip_2_Ave_Dist <- weighted.mean(trip_ok_2$travdist, trip_ok_2$trexpfac)

DiffAveDist <- Trip_1_Ave_Dist-Trip_2_Ave_Dist
PercentDiffAveDist <- 100*DiffAveDist/Trip_2_Ave_Dist

#Trips_Dist <- data.frame(cbind(Trip_1_Ave_Dist,Trip_2_Ave_Dist, DiffAveDist, #PercentDiffAveDist))
#colnames(Trips_Dist)<- c(names(paths[1]), names(paths[2]), "Difference", "Percent Difference")
#print("Average Distance")
#print(Trips_Dist)

Totals_HHTrips <- data.frame(rbind(
                          cbind(TripsperPerson_1, TripsperPerson_2, DiffTripsperPers, PercentDiffTripPer),
                          cbind(Trip_1_Ave_Dist ,Trip_2_Ave_Dist,DiffAveDist, PercentDiffAveDist)))

row.names(Totals_HHTrips)<-  c("Average Trips per Person", "Average Trip Length")
colnames(Totals_HHTrips) <- c(names(paths[1]), names(paths[2]), "Difference", "Percent Difference")

print(Totals_HHTrips, scientific=false)
@

\subsection{Vehicle Miles per Person}
<<summary, cache=TRUE, eval=TRUE, echo=FALSE, include=TRUE, results = verbatim>>=
trip_ok_1 <- subset(Trip_1, travdist>0 & travdist<2000)
trip_ok_2<- subset(Trip_2, travdist>0 & travdist<2000)

Trip_1$share <- Trip_1$trexpfac/sum(Trip_1$trexpfac)
Trip_2$share <- Trip_2$trexpfac/sum(Trip_2$trexpfac)

driver_trips1<-trip_ok_1[trip_ok_1$dorp==1]
driver_trips2<- trip_ok_2[trip_ok_2$dorp==1]
Ave_Vehicle_Miles1 <- sum(driver_trips1$trexpfac*driver_trips1$travdist)/Person_1_total
Ave_Vehicle_Miles2 <- sum(driver_trips2$trexpfac*driver_trips2$travdist)/Person_2_total
PercentDiffVehMiles<- 100*(Ave_Vehicle_Miles1-Ave_Vehicle_Miles2)/Ave_Vehicle_Miles2

                      
VehMiles <-cbind(Ave_Vehicle_Miles1 , Ave_Vehicle_Miles2, PercentDiffVehMiles)
colnames(VehMiles)<- c("Model Vehicle Miles per Person", "Survey Vehicle Miles per Person", "Percent Diff")
print(VehMiles, row.names=FALSE, digit=2)
@

\section{Work and School Location}
\subsection{Average Distance to Work in Miles}
<<summary, cache=TRUE, eval=TRUE, echo=FALSE, include=TRUE, results = verbatim>>=
wrkrs <-subset(merge_per_hh_1, pwtyp>0)
wkr_1_hzone <- merge(zone_district, wrkrs, by.y = "hhtaz", by.x = "TAZ")
total_workers_1 <- nrow(wrkrs)

wrkrs2 <-subset(merge_per_hh_2, pwtyp>0)
wkr_2_hzone <- merge(zone_district, wrkrs2, by.y = "hhtaz", by.x = "TAZ")
workers_1 <- subset(wkr_1_hzone, wkr_1_hzone$pwpcl!=wkr_1_hzone$hhparcel & pwaudist>0 &pwaudist<200, select=c("pwaudist", "psexpfac", "pwtyp","pgend", "pagey"))
workers_2 <- subset(wkr_2_hzone, wkr_2_hzone$pwpcl!=wkr_2_hzone$hhparcel & pwaudist>0 &pwaudist<200,select=c("pwaudist", "psexpfac", "pwtyp","pgend", "pagey"))

workers_1$share <- workers_1$psexpfac/sum(workers_1$psexpfac)
workers_2$share <- workers_2$psexpfac/sum(workers_2$psexpfac)

workers_1$type <- names(paths[1])
workers_2$type <- names(paths[2])

workers_1_avg_dist <- weighted.mean(workers_1$pwaudist, workers_1$psexpfac)
workers_2_avg_dist <- weighted.mean(workers_2$pwaudist, workers_2$psexpfac)

worker_dist <-cbind(workers_1_avg_dist, workers_2_avg_dist)
colnames(worker_dist)<-c(names(paths[1]),names(paths[2]))

print("Average Distance in Work in Miles (where distance >0.05, and <200 miles)")
print(worker_dist, digits=2, row.names=FALSE)
@




\section{Trip Summaries}
<<summary, cache=TRUE, eval=TRUE, echo=FALSE, include=TRUE, results =verbatim>>=
# this is way too long and should be in a separate function
# but I'm having trouble figuring out how to get ddply to work in a function
########### Cross Tabs for Trips#############
##Trip_1 summaries
 Trip_1_mode_time  <- ddply(Trip_1, .(mode), summarise,
                           total_trips  =  sum(trexpfac), 
                           mode_share = sum(trexpfac)/Trip_1_total,
                           mean_time = mean(travtime),
                           mean_dist = mean(travdist),
                           type = type[1])

  Trip_1_mode_purpose <- ddply(Trip_1 , .(mode,dpurp), summarise,
                             total_trips  =  sum(trexpfac),
                             mean_time = mean(travtime),
                             mean_dist = mean(travdist),
                             type = type[1])

  
  
  Trip_2_mode_time  <- ddply(Trip_2, .(mode), summarise,
                           total_trips  =  sum(trexpfac), 
                           mode_share = sum(trexpfac)/Trip_2_total,
                           mean_time = mean(travtime),
                           mean_dist = mean(travdist),
                           type = type[2])

  Trip_2_mode_purpose <- ddply(Trip_2 , .(mode,dpurp), summarise,
                             total_trips =  sum(trexpfac),
                             mean_time = mean(travtime),
                             mean_dist = mean(travdist),
                             type = type[2])
trip_ok_1 <- subset(Trip_1, travdist>0 & travdist<2000)
trip_ok_2<- subset(Trip_2, travdist>0 & travdist<2000)

trip_ok_1$hr <- floor(trip_ok_1$deptm/60)
trip_ok_2$hr <- floor(trip_ok_2$deptm/60)

Trip_1_time<- aggregate(trip_ok_1$trexpfac, by = list(trip_ok_1$hr), length)
Trip_2_time<- aggregate(trip_ok_2$trexpfac, by = list(trip_ok_2$hr), sum)

Trip_1_time<- aggregate(trip_ok_1$trexpfac, by = list(trip_ok_1$hr), length)
Trip_2_time<- aggregate(trip_ok_2$trexpfac, by = list(trip_ok_2$hr), sum)

Trip_1_time$share <- 100*Trip_1_time$x/length(trip_ok_1$trexpfac)
Trip_2_time$share <- 100*Trip_2_time$x/sum(trip_ok_2$trexpfac)

number_ticks <- function(n) {function(limits) pretty(limits, n)}

Trip_1_2_mode <- merge(Trip_1_mode_time, Trip_2_mode_time, by = "mode")
Trip_1_2_mode_share <- Trip_1_2_mode[,c('mode','mode_share.x','mode_share.y')]
Trip_1_2_mode_share$mode_share.x <-Trip_1_2_mode_share$mode_share.x *100
Trip_1_2_mode_share$mode_share.y <-Trip_1_2_mode_share$mode_share.y *100
Trip_1_2_mode_share$Difference <- Trip_1_2_mode_share$mode_share.x - Trip_1_2_mode_share$mode_share.y
Trip_1_2_mode_share$PercentDifference <- 100*(Trip_1_2_mode_share$mode_share.x - Trip_1_2_mode_share$mode_share.y)/Trip_1_2_mode_share$mode_share.y
colnames(Trip_1_2_mode_share )<- c("Trip Mode", paste(names(paths[1]), "share", sep=" "), paste(names(paths[2]), "share", sep=" "),"Difference", "Percent Difference")

print(Trip_1_2_mode_share)

print("Total Observed Transit Boardings(2011)")
print("647,127")
print("Assuming 1.3 Boardings per Trip- Implied Trips from Boardings")
transit<-Trip_1_mode_time$total_trips[Trip_1_mode_time$mode=='transit']
implied_boardings<-transit*1.3 
print(implied_boardings)


@




\subsection{See RPlot.pdf for plots}
<<summary, cache=TRUE, eval=TRUE, echo=FALSE, include =TRUE>>=
##################### Plots ######################################################
trips_1_2_append <-rbind.fill(trip_ok_1,trip_ok_2)

trips_1_2_append$type <- as.factor(trips_1_2_append$type)

trips_dist_graph <- ggplot(data= trips_1_2_append,
                           aes(x=travdist, weight=share, fill=type))
trips_dist_graph + geom_histogram(binwidth = 1.5, colour= "black",position= position_dodge(width = 1.0), alpha = 1.0) +xlab("Auto Distance (miles)") + ylab("Total Trips")+scale_x_continuous(limits = c(0, 50))+ labs(title="Trip Lengths")


\end{document}